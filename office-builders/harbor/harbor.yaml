---
# Source: harbor/templates/core/core-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
type: Opaque
data:
  _REDIS_URL_CORE: "cmVkaXM6Ly9kZWZhdWx0Om9uY2Vhc0BrdWJlLWNhY2hpbmcua3ViZS1zdGFjazo2Mzc5LzA="
  _REDIS_URL_REG: "cmVkaXM6Ly9kZWZhdWx0Om9uY2Vhc0BrdWJlLWNhY2hpbmcua3ViZS1zdGFjazo2Mzc5LzI="
  REGISTRY_CREDENTIAL_USERNAME: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "OVFmakRqNjg3Z0JSU0ZYTXJMeW1qWjF6RFUzUHdhQVo="
  HARBOR_ADMIN_PASSWORD: "T25jZWFzIUAj"
  POSTGRESQL_PASSWORD: "b25jZWFz"
---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-core
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
type: Opaque
data:
  secretKey: "MVBaTDRGOFBDNlQzNWR1UA=="
  secret: "aUdZNldxTzR5bFBEd3FVZg=="
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJRENDQWdpZ0F3SUJBZ0lSQVBncStNSnVjN3JhbUNYbnloU1gzTTB3RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUI0WERUSXpNVEl4T0RBeU5EWXpORm9YRFRJMApNVEl4TnpBeU5EWXpORm93R2pFWU1CWUdBMVVFQXhNUGFHRnlZbTl5TFhSdmEyVnVMV05oTUlJQklqQU5CZ2txCmhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOEIzQWFZQ1BNckFxQVQwTXdreGlpcVJoVUJNVXEwTUkKNld3bi9rb3VUSUZJcEQ4ck1kM05zeHhFQ002OWg0clMvcnJXMFYydWJrVVFZR2dRSWN1UC90NVdkODdsa0xJbgp1VmU0Uzk5NmlEV0MvRkUvSmxTWlB0Yk9wdlN1VG1YTUkvUmRrdWJBWjBrTVQ0MitHM05hQVNMYjRDTWsxdHNQClAzZW9ucnZldGR3Zlo1RkQ5Y0svMVdtVTh0Qm5aR09zcmw5UWNpZGlKdG04OHBveE54L2JYbkcyWW1wOU5xME4KeW5LYTRuS2o2UGNBTUtYNHN1MFZpVHg4cVYyZXY3RjZhakJPTkRFeSt3N1JKSWRFeTVmZXhKUUd3cG16cW5QRwpMWnhGVkpEZCtNK3RKYjBxQisvMy9VcWpLd3VOSTlYQ1RRRzVQVEtaRlNEM1ZOTC9NY3B6VndJREFRQUJvMkV3Clh6QU9CZ05WSFE4QkFmOEVCQU1DQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUMKTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRk1qNUFGaE1saHRNTWlmV3RRREtuc2wrdW11MgpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNOdWhsZ1ladkVxOEtORmtJd3QzY3AzY3dHUUhueWEzaXV5Ym9UCnkzUkZmOXlMdTdRaEd6cVMzK0VoU0QwZG54TFlMYjBTVTlHT2NVVVI5Zzhja1FwMzVDa1htNmMwSnptR0V3TzUKbDQ4WG9qZDJueHlaVHpvMTB5R2lmWXZ6TDJ2bCtlaWNTVElqVkJlUHRmR29EdlZqV1hEQUdURm9kQW9wRkd1bQp2dnk4eHVDblRSWkV4Zmo4ckEyc0JHSC85YXpyVitSL1VxQXpvTURFYXk3clZQNlhCc1UxMEFsVWFGZXZuYVZNClBLb1VRLytLYUFNdnZvbDFKQ1VVY1oxZitQdmw1WE9YN0Q0VWo4bVpML1JRUGYyRnJPb0dXaHIrSk02S0dWTHAKZjlsd05tZFFKTXR4MXhUTlRlNzFyVGkvQzQ5VTFhTG04Vnh2N2tYelJTN3JqeSs0Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBOEIzQWFZQ1BNckFxQVQwTXdreGlpcVJoVUJNVXEwTUk2V3duL2tvdVRJRklwRDhyCk1kM05zeHhFQ002OWg0clMvcnJXMFYydWJrVVFZR2dRSWN1UC90NVdkODdsa0xJbnVWZTRTOTk2aURXQy9GRS8KSmxTWlB0Yk9wdlN1VG1YTUkvUmRrdWJBWjBrTVQ0MitHM05hQVNMYjRDTWsxdHNQUDNlb25ydmV0ZHdmWjVGRAo5Y0svMVdtVTh0Qm5aR09zcmw5UWNpZGlKdG04OHBveE54L2JYbkcyWW1wOU5xME55bkthNG5LajZQY0FNS1g0CnN1MFZpVHg4cVYyZXY3RjZhakJPTkRFeSt3N1JKSWRFeTVmZXhKUUd3cG16cW5QR0xaeEZWSkRkK00rdEpiMHEKQisvMy9VcWpLd3VOSTlYQ1RRRzVQVEtaRlNEM1ZOTC9NY3B6VndJREFRQUJBb0lCQUhUL09pcnQvbGhIYUNBMApYQXdzWmZPQ0J2eWFYMzdYYWZjNndQM3hyVCtQMnhKVXlUcENCaUdZeXptemFyd3BrNGVWQ0dqNWlhMm5MMFNhClVBbjNneEUveXNnVDR0MnZRUlhaUFM2VEZNUmJ0cGcxQ2wwbDZZbXA1d1dJd1lubnBpRjZ4MEYxK0JnYmlza1UKbXFZTGZiYUNBcnJpeE9kLzA1MHNNOWdzV0djcGllK3h3RCsyMUw3K3R2QUFsK05ZalNtWUxPTnhuY3BaWFJwMQplWjZ0aFZ5ZCthNUZ3emNxdXl2dThOVjdDS1RPckQ5VHNERVUvbkpTNGNyNWlKSjRuOFYzb0p2MHFOZlFGUTNLClRJMEsrc1p6YVY4UDBPR0xhOHcyQk15YlJIMjJweTRIT1RldXphZGQremM0akF5WXpRTVJDRWN6eXZ6WWxuTWwKNXZodU1ja0NnWUVBK25NRisxMzNKRUZ5aHBMb1RPckk4ZEhvKzJNc2IrTUwrNlB3cGQ0VXJBUFRwUXZSWWZraApWUUVHRmFLZ1FrazI0dXF5VHVIQVRUMDM2NlpXeHpzUUlQOEg3VUNLeFlPak1JWEJ0U3N4dG1vLzEwUEhyRVcwCnR4cGdIWHlZNFBWd3RBdWEydHl5UkRhaUNWWTNrUjY1YVdWZ2FOVEI5aXhIdzBuZ2IyY1FlYVVDZ1lFQTlYQVoKN1RyZE40ZW4xYmJhT2l5QzhLY1RaS3VWaURva2E4TDNGUUM0dlhOTVpmbzl2RFhERFF2QS9zZkhqc1NQbk1PaApwODZGRjFEYmVzQVhpMkgwd3hJeE9IcDFUV2RRdDFVdzJ0Nk9sR2hiVW1lYU1VTW5VSDY3eUdRSmxaclV1WFdhCk1MYkJ5THNEWEwzbzlFWkw0Y2JFMjVYaTlsTzlXY0Yrc2JOQ2tFc0NnWUE2Qkpkb0tkWnMwYlNFTkZnWUtYT3YKZ1Y4bGpVM29CWUxySW9sSEEzRnFmK0J4cFpFMXp3N0hzRnNHZkF3QUR4SGw4MVNuTFdqcys3ZU9vWlFNeDBQdgpRT1ZITXVKeTZ4SE0xYytQOXBlbm1HbDlwcmdFMG9rUXVjMTJSenpyTURDUnBQYVVxUGVyRWJUcjBNdENsUW1DCnZ2ZGNrWnoxT0VEUG5yZWRWeFRiK1FLQmdHTmQ2RkZBUkxHbnJVNThBaXdOTzFIOUFuLythOExFYjF4bGlhMHEKSnFFazNlaG5nTGtETngzQUJYbmhIaXp4N1lhMU9XeDcweXhXWXhWMlVkSHZiYTNRWHJjVDlRdkthVVpnS2pCaQpiRzB2TnRITStnTTV3ZC8zLzBTcEk2dzdEQ2F0c3loSHhYcmtJLzlYTDhvOTc1alA1WUZWVkpjUDNoaEptMmFNClFjV3pBb0dBVzZkZkljdUliRnJJOEQ2REVnZ3VyQWFhak1kRnZSY3pOdFdIM290ZlJuWnh0NnhYVExXSExPVGgKQ2h5Q0V4a2pXTmhsM0MyQlBaNzVYRVA0OS9OSWZnRStaZENwVnA0eVpyNTR6NWF6Y2hYUXBqU0puMXFFQWNLRgpuUmRIS3RINTVCWWo3SFhmNTYzbjJhUlA0TlJON2drUjJrNHJrT21WcGdNVWE4TXJnSnM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: harbor/templates/jobservice/jobservice-config-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-jobservice-config
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
stringData:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://default:onceas@kube-caching.kube-stack:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    metric:
      enabled: false
      path: /metrics
      port: 8001
---
# Source: harbor/templates/jobservice/jobservice-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-jobservice-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-jobservice
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
type: Opaque
data:
  secret: "S0FuSnJmaEJKRGZqZjNWSQ=="
---
# Source: harbor/templates/nginx/tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-nginx
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.25.3
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: nginx
type: Opaque
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPakNDQWlLZ0F3SUJBZ0lRUWwwb2JBeHdlL2doaHBmbktFbjlVakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05Nak14TWpFNE1ESTBOak16V2hjTk1qUXhNakUzTURJMApOak16V2pBZE1Sc3dHUVlEVlFRREV4SmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdnZ0VpTUEwR0NTcUdTSWIzCkRRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQzJpUEIrMHpDSTBrcWUzdEV0R2xlSlFVOGc4emNFbDdjb1BaM2IKNWNtdWwyc3NRMGd4U0NCWlVoQmdyOUlPK2RaamI5RlpwbkdqZ29CSzI2RDdkNDhmZjN5c0xtcDA2UWxzd3MvWgpsTU9LcUN4N1dnNG52YUVaeWdQYVVYa1FITWpjUCtXUUFIWHVxQXJJNEdrSXVwR1JUQzhpTEFWSjExMlBzb0ZBCmFIV05jNk1OaWtyd0QwVnZqUU9rQ0hjQ3c0ZS9SRy9qMG44RDNONVBBc2d5eXRIVURLYm5zelgwYUNjWTVRYjgKMFo5RGoxVmVlYm5VNEZ5QkxBbm9uRHhlZlF0bjBwc3lOd1hjcEw3Q1REM1l5cnVoVEdjSHdKbUFUR2VFMXZtRgpLd3VtaXhxN2Vqb1dTSEZ2TFdZODZidlZrbFFhTEZZaHNyUWVrWlgvMHZsdEV3Q2hBZ01CQUFHamZ6QjlNQTRHCkExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWUQKVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUzRoRmRGR0NTRXBQdjE2QndReFJIZjdXQms3REFkQmdOVgpIUkVFRmpBVWdoSmpiM0psTG1oaGNtSnZjaTVrYjIxaGFXNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTXdmCkFoeWVJNERjRllkRElXWTU1ZjRBL1QrUllxR0lWVVp3SFNsQjNXQVQ5NXMyUlE5WVZxMkYvY1ZYMnNxQ1RPRmEKZnE5RjZyQ3J2SzIyclZ5QWthSHBDbVdNSnY5cDVYMzZnQ0FJYnVYakFVT2V3dU96aGdlK0Z0cUF6VFhUNnIwcgoxMi8xNE5YUXA1S3lvbGcvc1RzakNoeDJuYXFyM2RxaFpubmhlS0FsQUVaMklwYmIzVHBvQUNOZFk3OTlDQkN5Cjl0RDUzUGFCdXdoNXBxL29WSWtsNER3YzU3ZUdRQmdLbDVzRy9zMjh6ODV1K2o1YS8xZFl2SkRjVDdEWG53UysKVVJzTklWcXZhSWNCTHcvM3dTZGdsRjhvTnhidFdMNVFraTRwemNSSy8vSTQ5ZGJFcURxSS93VVlnb1p5ME1zLwpERk40ZnhrS0taSjlLWjJTSjFNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcGdJQkFBS0NBUUVBdG9qd2Z0TXdpTkpLbnQ3UkxScFhpVUZQSVBNM0JKZTNLRDJkMitYSnJwZHJMRU5JCk1VZ2dXVklRWUsvU0R2bldZMi9SV2FaeG80S0FTdHVnKzNlUEgzOThyQzVxZE9rSmJNTFAyWlREaXFnc2Uxb08KSjcyaEdjb0QybEY1RUJ6STNEL2xrQUIxN3FnS3lPQnBDTHFSa1V3dklpd0ZTZGRkajdLQlFHaDFqWE9qRFlwSwo4QTlGYjQwRHBBaDNBc09IdjBSdjQ5Si9BOXplVHdMSU1zclIxQXltNTdNMTlHZ25HT1VHL05HZlE0OVZYbm01CjFPQmNnU3dKNkp3OFhuMExaOUtiTWpjRjNLUyt3a3c5Mk1xN29VeG5COENaZ0V4bmhOYjVoU3NMcG9zYXUzbzYKRmtoeGJ5MW1QT203MVpKVUdpeFdJYkswSHBHVi85TDViUk1Bb1FJREFRQUJBb0lCQVFDeHJYQno4enl1SWd5eQp3bTlZZU9pMldSVWVITUQwUG4zeHRMQ2hhUGE5ZFBURW5DVjhteG1wK0VDcTdOb0s2OVJzN0Y0YTV2SjgxNzNyCm9BZitYMjI0bWs4UUJ3cG5ES080ODVTQTFkYlZkRWdBTmpQTEtVSFVxWmpBZlVmYmtEbFFjdjRSQXZISXdsZmwKR3RRQ3hDQ0lEMkZkNFAydzErdGh3YjhnbzgyeFJqWi9Ec05xVXJ2NlREYVN0L3JZNEpLN1cxRE1XanpMbXlhTworQVYrY000Z0MxS0Frak5YWGVNQm53cFBIYnlpUk1INTRObjdwakJaa1pPWkd4cnYrV3U2REhFelRaVkJwRndKCnR4ekllR3psV2ErL1hwYzhFVjBLaEFzR1MwSytObTY4ZUhOZGxDTk1RWVgzaGVuOFZuRDZOZlRXNndPWEk1MVUKTDNCMXNESlZBb0dCQU4xYmU2eGx4NFp5TEZXUklSSUhkNzYxRnBtcU04eTk1VzhJekxBMGpPVVNzczI1V05EQgpkZVpGanhZdjAycFVMSDhEN0NkeTdJUTVuNWZHcHduL2U0S2Z1NEx0R1d6QllhblFLcG1yRDVqSjNabVdXeTZVCm9rb1g3aTVEOVlDYUlqWDJzYjZPbnZyZ3c2cjkzZjgwWUFSNzNEdkJiUTZiYTd6RzRCdkdCUjBiQW9HQkFOTWEKRUlEbFc3V2NmZFN0MFpmN3NBZjJxL2pmM1k4aDNLcmN6ZGF6T2QrYStCTHRveEVUbjhQU3ZOSllldDc1R1pWYQpXbUgvQWYrbDFYZ25SS1pLSzA1OXZyMXpBa2lTdDhybTdDeWxUQURRL21EbFNSK3NyN21Dd0d6Y0xWOWhuK2xxCmhiOVNNZXpMQzd3SllYamJndTB1Y1g2dFRralEzTVV4eVZVNkR5RHpBb0dCQUpGTStzcDRhTmRrM0pzeVQ3M3cKN3ZaZEVqKytESkNKMmkvZlc5VVNPYVlvZHZ3NWZRWlM1MXhITHB5R3VrVWlpYTY2V1dxdnNuYzlCL2h0NnJuUwpYVFdxT2tDLytCOStkT2d0LzdpdEkrak1JVTB1K0IyRWJWOHJoQ29VYS9PRnVZMG9xUllIc20zRjJrckVwOU5jCmd1YU9rMHNhTmNjUDJGR3JUZktOTWxBZkFvR0JBSUFZMk5yZVVvQXByZEZZaUU2SlU1QUJodWxHTHRPajRKdHQKMFJudk43Y1ArbWpCK3FscUZ4QmsyRjlyZ1dPOEZHSWtxYU85Y2lFSEtEbjQyaGR0K2tsdTFFZHhlbmsvVG5lNQpHS2NleHJmWUdnUUNIaFV5WEk5ZFlCYXVwSG0wYTZ6Z0RyakJ6N200bkM1R0l2ZUxmQzhnZDQ0KzY3b1R3Mk9GCmluNUU5Tmt4QW9HQkFMNmF1cjY4a3dOTHAzVmh5V0dLQ1BhQnFlaDh3dW5TRSs3eERpaTd0Y2pFZDdSMkVUTEQKOE1WYnBPalZUeFJDNmk0S3lhK3RoWHhVVGhGbldPOGY5WVVTRE9NaElwUFA5RjJTaWdSdTJlUmpnWmlXVHIrbApDRlorWkxVNTN5bDA3SlNWN2h5QzF0RFJFejRJTm56cVBqQkdMeEJkUzhpUjJBaHNYQlo3N1FQSgotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRS2pmTDBlNlViN3dnSkhwbm9PV0lUekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05Nak14TWpFNE1ESTBOak16V2hjTk1qUXhNakUzTURJMApOak16V2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRE8xWVJad2Q3V1FMd2JwS2pGcUNwRmVDVjJ6eTQzZDFhTWtqa25QZ0kyNWdMQnVPY3AKbmFrVmJacVcyVmtQWTVOR2lrZEF5M2wwVXE1N0k3Ylc5c2Y2Z1ZUZ0hIZkpGdFNPV2RhNkpNM1dyL2docEVGagpRTURRM0Z2RjUySkZHYzdaQ3VXTGp3dFZqZVJEdm1SLzlQZWNWeHcyTFVKUmllMHBDV3BxaHJLOTFBODJDMzNNCmIzdy9WSkZPUkpDL2ZxbGpBWmE5dzQrK0hhRzJXeVpLTTdoL0xvdG9zckhnNk9kamxGbUd0c2MrN1lQVjJ3WmgKMXRoc09qMGkrNVl4M2ZxejVkaDdoUGxrRUx0eWFSWE1HTTlqWXRKNnoxVjZyZUttVlpWV3U3MXI1T1hnNTkwTQpZUTF3M2lseTRpczdmdTZBZVl2cFZTWlpBMXRjd3FDdTBmVy9BZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVV1SVJYUlJna2hLVDc5ZWdjRU1VUjMrMWdaT3d3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIL2dHcnVOME55bVBnNk1Kd25OVHVrZXU5Q2JTNVEyNnBzNi9ielR1Z0FiTlovaGtyN0p2MUp5CklqaTdMTjBKcTVINm9Fd3ZPNHNVMlVGck9BV3ZYR0NZeWlUbGlGYzk1MDNCcTFpTUFMcGdrME5udEtvR01IcTUKdGRLUThvdmUraHZkT1dlcGJqVDNrVTNReWxKMHpkd2IrcVkxb2xiOEVrZ285eEV1THEyRVZSWm4vMm9zdCsrUQo2eklSOHI4UUJBRWREU2JIRDJWWGlEbGNwZWFaOXJ3NEdmZ0hmSWltSXZrZXFVZTBObkgwbDZaWVk5L0RwMS9vCm5qd0x6eGIwY3NnSmcyQjJrVHBoUFpoMllob1V3Z0RGV3Njb3JBUXY2Nkdrb2djV0EzMU00RzMrSTdPa25nVjIKYSs2NVRTY3k1TG83aGVReTNoVkNHL1ZNNy9CVlFXQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-registry
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJ5JDEwJDlMNFRjMERKYkZGTUI2UmRTQ3Vuck9wVEhkd2hpZDRrdEJKbUxEMDBiWWdxa2tHT3ZsbDNt"
  REGISTRY_HTTP_SECRET: "c1VwTHNsOTRZbEZzTVNUVA=="
  REGISTRY_REDIS_PASSWORD: "b25jZWFz"
---
# Source: harbor/templates/trivy/trivy-secret-envvars.yaml
apiVersion: v1
kind: Secret
metadata:
  name: harbor-trivy-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: trivy
type: Opaque
data:
  SCANNER_TRIVY_GITHUB_TOKEN: ""
  SCANNER_REDIS_URL: cmVkaXM6Ly9kZWZhdWx0Om9uY2Vhc0BrdWJlLWNhY2hpbmcua3ViZS1zdGFjazo2Mzc5LzU=
  SCANNER_STORE_REDIS_URL: cmVkaXM6Ly9kZWZhdWx0Om9uY2Vhc0BrdWJlLWNhY2hpbmcua3ViZS1zdGFjazo2Mzc5LzU=
  SCANNER_JOB_QUEUE_REDIS_URL: cmVkaXM6Ly9kZWZhdWx0Om9uY2Vhc0BrdWJlLWNhY2hpbmcua3ViZS1zdGFjazo2Mzc5LzU=
---
# Source: harbor/templates/core/core-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
data:
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "kube-database.kube-stack"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "harbor"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://core.harbor.domain"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice:80"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "debug"
  CONFIG_PATH: "/etc/core/app.conf"
  SYNC_REGISTRY: "false"
  CHART_CACHE_DRIVER: "redis"
  PORTAL_URL: "http://harbor-portal:80"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-core
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = "8080"
---
# Source: harbor/templates/jobservice/jobservice-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-jobservice-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
  LOG_LEVEL: "debug"
---
# Source: harbor/templates/nginx/configmap-https.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-nginx
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.25.3
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |+
    worker_processes auto;
    pid /opt/bitnami/nginx/tmp/nginx.pid;

    events {
      worker_connections 3096;
      use epoll;
      multi_accept on;
    }

    http {
      client_body_temp_path  "/opt/bitnami/nginx/tmp/client_body" 1 2;
      proxy_temp_path        "/opt/bitnami/nginx/tmp/proxy" 1 2;
      fastcgi_temp_path      "/opt/bitnami/nginx/tmp/fastcgi" 1 2;
      scgi_temp_path         "/opt/bitnami/nginx/tmp/scgi" 1 2;
      uwsgi_temp_path        "/opt/bitnami/nginx/tmp/uwsgi" 1 2;

      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-core:80;
      }

      upstream portal {
        server harbor-portal:80;
      }

      log_format timed_combined '[$time_local]:$remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      
      server {
        listen 8443 ssl;
        listen [::]:8443 ssl;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;

        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        # Add extra headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header Content-Security-Policy "frame-ancestors 'none'";

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; HttpOnly; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }
        
        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /chartrepo/ {
          proxy_pass http://core/chartrepo/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_cookie_path / "/; Secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

      location /service/notifications {
          return 404;
        }
      }
      server {
          listen 8080;
          listen [::]:8080;
          return 301 https://$host$request_uri;
      }
    }
---
# Source: harbor/templates/portal/portal-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-portal
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: portal
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /opt/bitnami/harbor;
            index  index.html index.htm;
            include /opt/bitnami/nginx/conf/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
            location /devcenter-api-2.0 {
              try_files $uri $uri/ /swagger-ui-index.html;
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-registry
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "kube-caching.kube-stack:6379"
      db: 2
    http:
      relativeurls: false
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/trivy/trivy-cm-envvars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-trivy-envvars
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: trivy
data:
  SCANNER_LOG_LEVEL: "debug"
  SCANNER_TRIVY_CACHE_DIR: "/bitnami/harbor-adapter-trivy/.cache/trivy"
  SCANNER_TRIVY_REPORTS_DIR: "/bitnami/harbor-adapter-trivy/.cache/reports"
  SCANNER_TRIVY_DEBUG_MODE: "false"
  SCANNER_TRIVY_VULN_TYPE: "os,library"
  SCANNER_TRIVY_SEVERITY: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
  SCANNER_TRIVY_IGNORE_UNFIXED: "false"
  SCANNER_TRIVY_SKIP_UPDATE: "false"
  SCANNER_TRIVY_INSECURE: "false"
  SCANNER_API_SERVER_ADDR: ":8080"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal,%!s(MISSING),%!s(MISSING),%!s(MISSING),%!s(MISSING)"
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-core
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: core
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-jobservice
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: jobservice
---
# Source: harbor/templates/nginx/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.25.3
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: nginx
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: nginx
---
# Source: harbor/templates/portal/portal-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-portal
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: portal
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: portal
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-registry
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: registry
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-trivy
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: trivy
spec:
  ports:
    - name: api-server
      protocol: TCP
      port: 8080
      targetPort: api-server
  selector:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/name: harbor
    app.kubernetes.io/component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-core
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: core
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.9.1
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: core
      annotations:
        checksum/configmap: bfccf4e844de867928cb40cf13b265a249d3cc20bb6bd321c64eb26e1bc4399f
        checksum/configmap-envvars: 702452a66140351895c59cd877a8442d52a0eb5033c58680b48cfc309560306b
        checksum/secret: 966662aef7654910d164b7f8973bb395dc719307b8207bfb42c1853caaa2409d
        checksum/secret-envvars: b2f53618e7d84ec4af277f037dcd4a30eb6924ede6d524bcc19fc4b1b4b0afb4
        checksum/secret-jobservice: 9a5544fb811b3c6c155e508a3346736379df8676255df1348cad1318039f42d0
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: core
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      containers:
        - name: core
          image: docker.io/bitnami/harbor-core:2.9.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: harbor-core-envvars
            - secretRef:
                name: harbor-core-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: http
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: token-service-private-key
          secret:
            secretName: harbor-core
        - name: secret-key
          secret:
            secretName: harbor-core
            items:
              - key: secretKey
                path: key
        - name: ca-download
          secret:
            secretName: harbor-nginx
        - name: psc
          emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-jobservice
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: jobservice
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.9.1
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: jobservice
      annotations:
        checksum/configmap-env: 27f971e6647ada3ac334c17187b3c698b16b95891702ad1f3a9a110a9c255dab
        checksum/secret-env: 0551ec5c30b99ab18408cc6a9ef6311fcb94aeab3515938f09e3361f1bdd513a
        checksum/secret-config: fa58466a84b1f73782f19d02e20474ced824575fa49eaf2242c574252af17913
        checksum/secret: 045dd8c9344f37e8262e81225fe4fb01837f547c3b4749f5d0e3305a32fb4070
        checksum/secret-core: b050a41d69baf38342002c8a55d0fdac83baeed2617f75dbe6bdc26f3c762a10
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: jobservice
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: jobservice
          image: docker.io/bitnami/harbor-jobservice:2.9.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-jobservice
                  key: secret
          envFrom:
            - configMapRef:
                name: harbor-jobservice-envvars
            - secretRef:
                name: harbor-jobservice-envvars
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/v1/stats
              port: http
              scheme: HTTP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
              subPath: 
      volumes:
        - name: jobservice-config
          secret:
            secretName: harbor-jobservice-config
        - name: job-logs
          persistentVolumeClaim:
            claimName: harbor-jobservice
---
# Source: harbor/templates/nginx/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-nginx
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 1.25.3
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: nginx
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 1.25.3
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: nginx
      annotations:
        checksum/configmap: d9ddd16b8e74188106be2a9d79df4b7292ef06c9c8f8ccbd1aae9bfa72aac25b
        checksum/tls-secret: 388737c547d6206c4f2380af77f4bdc89fab2a2594fc6bc909338416604d15a7
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: nginx
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      containers:
        - name: nginx
          image: docker.io/bitnami/nginx:1.25.3-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8443
              name: https
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: https
              scheme: HTTPS
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
            - name: certificate
              mountPath: /etc/nginx/cert
      volumes:
        - name: config
          configMap:
            name: harbor-nginx
        - name: certificate
          secret:
            secretName: harbor-nginx
---
# Source: harbor/templates/portal/portal-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-portal
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: portal
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.9.1
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: portal
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: portal
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      containers:
        - name: portal
          image: docker.io/bitnami/harbor-portal:2.9.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
          ports:
            - containerPort: 8080
              name: http
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
              scheme: HTTP
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: portal-config
              mountPath: /opt/bitnami/nginx/conf/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: portal-config
          configMap:
            name: harbor-portal
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-registry
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: registry
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.9.1
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: registry
      annotations:
        checksum/configmap: 98b4a600a91a9aec5c49cc816af2c0d27640653a67c0cd31c187ef783a36649f
        checksum/secret: c4b9971777d1f8a44392f1388a0270abc493afd6b0a333981169970ff36f97c9
        checksum/secret-jobservice: 8709f9f9a1d9d32590528127af51b8cb0782b67699f69838e1df3356c7422e47
        checksum/secret-core: c5ddedeb2db34dd8dce853314a63815b974b3c9538c80d10006f5555cabd0ab0
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: registry
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      initContainers:
      containers:
        - name: registry
          image: docker.io/bitnami/harbor-registry:2.9.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - secretRef:
                name: harbor-registry
          ports:
            - containerPort: 5000
              name: registry
            - containerPort: 5001
              name: debug
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              scheme: HTTP
              port: registry
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              scheme: HTTP
              port: registry
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-root-certificate
              mountPath: /etc/registry/root.crt
              subPath: tls.crt
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
        - name: registryctl
          image: docker.io/bitnami/harbor-registryctl:2.9.1-debian-11-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: harbor-registry
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-jobservice
                  key: secret
          ports:
            - containerPort: 8080
              name: registryctl
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /api/health
              scheme: HTTP
              port: registryctl
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: registry-data
              mountPath: /storage
              subPath: 
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: harbor-registry
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-root-certificate
          secret:
            secretName: harbor-core
        - name: registry-config
          configMap:
            name: harbor-registry
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-trivy
  namespace: "kube-mlops"
  labels:
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.9.1
    helm.sh/chart: harbor-19.2.1
    app.kubernetes.io/component: trivy
spec:
  replicas: 1
  serviceName: harbor-trivy
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
      app.kubernetes.io/component: trivy
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.9.1
        helm.sh/chart: harbor-19.2.1
        app.kubernetes.io/component: trivy
      annotations:
        checksum/configmap-env: 65f9eeb99ad21e4795cc13331a488b05bccdb0a7530056c22cae1e8722c675d8
        checksum/secret-env: 11c59641329aa54a20e00c13f0c53ab2e8a32647e46737802bca4b493d9b5437
    spec:
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                    app.kubernetes.io/component: trivy
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      securityContext:
        fsGroup: 1001
      automountServiceAccountToken: false
      initContainers:
      containers:
        - name: trivy
          image: docker.io/bitnami/harbor-adapter-trivy:2.9.1-debian-11-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - configMapRef:
                name: harbor-trivy-envvars
            - secretRef:
                name: harbor-trivy-envvars
          ports:
            - name: api-server
              containerPort: 8080
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/harbor-adapter-trivy/.cache
              readOnly: false
      volumes:
      - name: "data"
        persistentVolumeClaim:
          claimName: harbor-trivy
